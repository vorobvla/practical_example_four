/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Networking.Networking;
import java.awt.Component;
import javax.swing.JOptionPane;

/**
 *
 * @author Vladimir Vorobyev (vorobvla)
 */
public class NetworkPanel extends javax.swing.JPanel {

    /**
     * Creates new form NatworkPanel
     */
    public NetworkPanel() {
        initComponents();
        interfaceNameField.setText(Networking.getInstance().getNetIntfceName());
        moderatorPortField.setText(Integer.toString(Networking.getInstance().getModeratorPort()));
        broadcastCheckBox.setSelected(Networking.getInstance().getBroadcastGameOpt());
    }
    
    public boolean setup(String ifce, Integer port, Component from) throws RuntimeException{
        if ((ifce == null) || (port == null) ) { 
            interfaceNameField.setText(ifce);
            moderatorPortField.setText("");
            return false;
        };
        
        try {
            if ( !(ifce.matches(Networking.getInstance().getNetIntfceName())) )
            {
            
                Networking.getInstance().setUpByInfceName(ifce);
                interfaceNameField.setText(ifce);
            
        }
            if (port != Networking.getInstance().getModeratorPort()){
                Networking.getInstance().setModeratorPort(port);
                moderatorPortField.setText(port.toString());
        }
        } catch (RuntimeException ex) {
            switch (ex.getMessage()){
                case "UDP socket failure" :
                    JOptionPane.showMessageDialog(from,
                    "Most likely port needed for broadcast is occupied."
                            + "Try to close any programs that can use network and relaunch the appliaction",
                    "Networking failure (UDP socket failure)",
                    JOptionPane.ERROR_MESSAGE);
                    break;
                case "Moderator socket failure" :
                    JOptionPane.showMessageDialog(from,
                    "Most likely moderator's port is occupied. Try to chnge the port in \"Network settings\"",
                    "Networking failure (TCP server socket failure)",
                    JOptionPane.ERROR_MESSAGE);
                    break;
            }
            return false;
        } 
        Networking.getInstance().setBroadcastGameOpt(broadcastCheckBox.isSelected());
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        interfaceNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        moderatorPortField = new javax.swing.JTextField();
        OkButton = new javax.swing.JButton();
        broadcastCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Networking Settings"));

        jLabel2.setText("Port");

        interfaceNameField.setText("");

        jLabel1.setText("Network Intarface name");

        moderatorPortField.setText("");

        OkButton.setText(Constants.BTN_OK);
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        broadcastCheckBox.setText("Broadcast game information  to players");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(interfaceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(moderatorPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(broadcastCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1))
                    .addComponent(interfaceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel2))
                    .addComponent(moderatorPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(broadcastCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(OkButton)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        if (setup(interfaceNameField.getText(), Integer.parseInt(moderatorPortField.getText()), this)){
            JOptionPane.showMessageDialog(this,
                "Network settings have been sucessfully changed",
                "Network settings changed",
                JOptionPane.INFORMATION_MESSAGE);
        }
        update();
       // System.out.println("ifce " + Networking.getInstance().getNetIntfceName());
    }//GEN-LAST:event_OkButtonActionPerformed

    public void update(){
        interfaceNameField.setText(Constants.PRINT_OR_NONE(
                Networking.getInstance().getNetIntfceName()));
        moderatorPortField.setText(Constants.PRINT_OR_NONE(
                Networking.getInstance().getModeratorPort()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OkButton;
    private javax.swing.JCheckBox broadcastCheckBox;
    private javax.swing.JTextField interfaceNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField moderatorPortField;
    // End of variables declaration//GEN-END:variables
}
